# -*- coding: utf-8 -*-
"""rock_paper_scissors_game_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/102joaPXY6XjWnk1D9xxXjyvRt4c4HZ5v
"""

import streamlit as st
import random

st.set_page_config(page_title="Rock, Paper, Scissors", page_icon="🪨📄✂️")

st.title("🪨📄✂️ Rock, Paper, Scissors")
st.markdown("Welcome to the classic game! Can you beat the computer?")

# Rules toggle
with st.expander("📜 Show Game Rules"):
    st.markdown("""
    - **Rock** crushes **Scissors**
    - **Scissors** cuts **Paper**
    - **Paper** covers **Rock**
    """)

# Initialize session state
if "user_score" not in st.session_state:
    st.session_state.user_score = 0
    st.session_state.computer_score = 0
    st.session_state.ties = 0

# Game options
choices = ["Rock", "Paper", "Scissors"]
emojis = {"Rock": "🪨", "Paper": "📄", "Scissors": "✂️"}

# Game logic
def determine_winner(user, computer):
    if user == computer:
        st.session_state.ties += 1
        return "🤝 It's a tie!"
    elif (user == "Rock" and computer == "Scissors") or \
         (user == "Paper" and computer == "Rock") or \
         (user == "Scissors" and computer == "Paper"):
        st.session_state.user_score += 1
        return "🎉 You win!"
    else:
        st.session_state.computer_score += 1
        return "💻 Computer wins!"

# User choice
user_choice = st.radio("Choose your move:", choices, horizontal=True, format_func=lambda x: f"{emojis[x]} {x}")

# Play the game
if st.button("Play"):
    computer_choice = random.choice(choices)
    st.markdown(f"**You chose:** {emojis[user_choice]} {user_choice}")
    st.markdown(f"**Computer chose:** {emojis[computer_choice]} {computer_choice}")

    result = determine_winner(user_choice, computer_choice)
    st.subheader(result)

    if "You win" in result:
        st.balloons()

# Display score
st.markdown("### 🧮 Scoreboard")
st.write(f"👤 You: {st.session_state.user_score}")
st.write(f"💻 Computer: {st.session_state.computer_score}")
st.write(f"🤝 Ties: {st.session_state.ties}")

# Reset button
if st.button("Reset Score"):
    st.session_state.user_score = 0
    st.session_state.computer_score = 0
    st.session_state.ties = 0
    st.success("Scoreboard has been reset!")